version: '3.3'

services:
  # Service for DVC pipeline
  dvc_pipeline:
    build: .
    image: dvc_pipeline_image
    env_file:
      - .env
    # environment:
    #   - DAGSHUB_USER_NAME=${DAGSHUB_USER_NAME}
    #   - DAGSHUB_PASSWORD=${DAGSHUB_PASSWORD}
    container_name: dvc_pipeline_container
    command: >
      sh -c "
      set -e &&
      
      (dvc remote list | grep . || { echo 'DVC remote list failed or no remotes found, checking config...'; exit 1; }) &&
      
      echo 'Remote DVC authorization was successful ...' &&
      
      (if [ -f data/modified_raw_data.csv ]; then
        echo 'Raw data file exists';
      else
        echo 'Raw data file does not exist. The data will be created using the Kaggle API';
        python src/create_dataset.py;
      fi) &&

      echo 'Running the DVC pipeline' &&
      dvc repro -f &&

      echo 'Pushing to the remote (DagsHub)' &&
      dvc push"

    volumes:
      - .:/app

  # # Service for Flask application
  # flask:
  #   build: .
  #   image: flask_api_image
  #   container_name: flask_api_container
  #   depends_on:
  #     dvc_pipeline:
  #       condition: service_completed_successfully

  #   command: python src/flask_api.py
  #   volumes:
  #     - .:/app
  #   ports:
  #     - "5000:5000"
