# name: CI/CD

# on:
#   push:
#     branches:
#       - main  # Trigger the workflow on push to the main branch
#   workflow_dispatch:  # Allow manual trigger from GitHub Actions UI

# jobs:
#   Create_Run_Deploy:
#     runs-on: ubuntu-latest  # Use the latest Ubuntu runner for the workflow

#     steps:
#       # Checkout the code from GitHub repository
#       - name: Checkout code
#         uses: actions/checkout@v2  # Pulls the code from the repository

#       # Set up Python environment
#       - name: Set up Python
#         uses: actions/setup-python@v2  # Sets up Python for the workflow
#         with:
#           python-version: '3.9'  # Specifies the Python version to use

#       # Install dependencies from requirements.txt
#       - name: Install dependencies
#         run: |
#           echo "Installing libraries ..."  
#           pip install -r requirements.txt  

#       - name: Create .env file dynamically
#         run: |
#           echo "Creating .env file..."

#           echo "DAGSHUB_PASSWORD=${{ secrets.DAGSHUB_PASSWORD }}" >> .env
#           echo "DAGSHUB_USER_NAME=${{ secrets.DAGSHUB_USER_NAME }}" >> .env
#           echo "EVIDENTLY_PROJECT_ID=${{ secrets.EVIDENTLY_PROJECT_ID }}" >> .env
#           echo "EVIDENTLY_TOKEN=${{ secrets.EVIDENTLY_TOKEN }}" >> .env
#           echo "KAGGLE_KEY=${{ secrets.KAGGLE_KEY }}" >> .env
#           echo "KAGGLE_USERNAME=${{ secrets.KAGGLE_USERNAME }}" >> .env
#           echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> .env
#           echo "HF_GITHUB_ACTIONS_TOKEN=${{ secrets.HF_GITHUB_ACTIONS_TOKEN }}" >> .env

#           echo ".env file created."

#       - name: Create the dataset
#         run: |
#           echo 'Creating a raw dataset using the Kaggle API ...'
#           python src/create_dataset.py
          
#       # Force DVC repro to re-run all of the existing steps
#       - name: Run the full DVC pipeline
#         run: |
#           echo 'Starting the DVC pipeline ...'
#           dvc repro -f


name: CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  Create_Run_Deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from GitHub repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Remove any existing Docker and containerd (to resolve conflicts)
      - name: Remove conflicting Docker and containerd
        run: |
          sudo apt-get remove -y docker docker-engine docker.io containerd runc
          sudo apt-get autoremove -y

      # Install Docker and containerd.io
      - name: Install Docker and containerd.io
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Create .env file dynamically
      - name: Create .env file dynamically
        run: |
          echo "DAGSHUB_PASSWORD=${{ secrets.DAGSHUB_PASSWORD }}" >> .env
          echo "DAGSHUB_USER_NAME=${{ secrets.DAGSHUB_USER_NAME }}" >> .env
          echo "EVIDENTLY_PROJECT_ID=${{ secrets.EVIDENTLY_PROJECT_ID }}" >> .env
          echo "EVIDENTLY_TOKEN=${{ secrets.EVIDENTLY_TOKEN }}" >> .env
          echo "KAGGLE_KEY=${{ secrets.KAGGLE_KEY }}" >> .env
          echo "KAGGLE_USERNAME=${{ secrets.KAGGLE_USERNAME }}" >> .env
          echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> .env
          echo "HF_GITHUB_ACTIONS_TOKEN=${{ secrets.HF_GITHUB_ACTIONS_TOKEN }}" >> .env
          echo ".env file created."

      # Build Docker images using docker-compose
      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.yaml build

      # Start Docker containers using docker-compose
      - name: Start Docker containers
        run: |
          docker-compose -f docker-compose.yaml up -d
        env:
          DAGSHUB_PASSWORD: ${{ secrets.DAGSHUB_PASSWORD }}
          DAGSHUB_USER_NAME: ${{ secrets.DAGSHUB_USER_NAME }}
          EVIDENTLY_PROJECT_ID: ${{ secrets.EVIDENTLY_PROJECT_ID }}
          EVIDENTLY_TOKEN: ${{ secrets.EVIDENTLY_TOKEN }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          HF_GITHUB_ACTIONS_TOKEN: ${{ secrets.HF_GITHUB_ACTIONS_TOKEN }}

      # Run dvc repro -f inside the dvc_pipeline container
      - name: Run DVC repro inside the container
        run: |
          docker-compose exec dvc_pipeline dvc repro -f

      # Shut down Docker containers after the workflow
      - name: Shut down Docker containers
        run: |
          docker-compose down
